; EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t -*-
; vim: tabstop=2:shiftwidth=2:noexpandtab
; kate: tab-width 2; replace-tabs off; indent-width 2;
; 
; ==============================================================================
; Authors:					Patrick Lehmann
;
; Assembler-Code:		Timer functions
; 
; Description:
; ------------------------------------
;	public functions:
;		__DEV_BCDCnt_Reset
;		__DEV_BCDCnt_Start
;		__DEV_BCDCnt_Stop
;		__DEV_BCDCnt_GetValue
;		__DEV_BCDCnt_GetValue_OnStack
; 
;	private functions:
;   
; License:
; ==============================================================================
; Copyright 2007-2015 Technische Universitaet Dresden - Germany,
;										 Chair for VLSI-Design, Diagnostics and Architecture
; 
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
;		http://www.apache.org/licenses/LICENSE-2.0
; 
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ==============================================================================
;
; ==============================================================================
; Constants for bit-masks and register-field values
; ==============================================================================
; Reg_Command
CONSTANT BCDCNT_CMD_COMMAND_RESET,							00000001'b
CONSTANT BCDCNT_CMD_COMMAND_STOP,								00000000'b
CONSTANT BCDCNT_CMD_COMMAND_COUNT,							00000010'b
;
; Co-Processor macros
; ===============================================
;
;PRAGMA function __DEV_BCDCnt_Reset begin
__DEV_BCDCnt_Reset:							LOAD			REG_TMP_0, BCDCNT_CMD_COMMAND_RESET
																OUTPUT		REG_TMP_0, OPORT_BCDCNT_COMMAND
																RETURN
;PRAGMA function end
;
;PRAGMA function __DEV_BCDCnt_Start begin
__DEV_BCDCnt_Start:							LOAD			REG_TMP_0, BCDCNT_CMD_COMMAND_COUNT
																OUTPUT		REG_TMP_0, OPORT_BCDCNT_COMMAND
																RETURN
;PRAGMA function end
;
;PRAGMA function __DEV_BCDCnt_Stop begin
__DEV_BCDCnt_Stop:							LOAD			REG_TMP_0, BCDCNT_CMD_COMMAND_STOP
																OUTPUT		REG_TMP_0, OPORT_BCDCNT_COMMAND
																RETURN
;PRAGMA function end
;
;PRAGMA function __DEV_BCDCnt_GetValue begin
__DEV_BCDCnt_GetValue:					INPUT			REG_ARG_0, IPORT_BCDCNT_VALUE0
																INPUT			REG_ARG_1, IPORT_BCDCNT_VALUE1
																INPUT			REG_ARG_2, IPORT_BCDCNT_VALUE2
																INPUT			REG_ARG_3, IPORT_BCDCNT_VALUE3
																RETURN
;PRAGMA function end
;
;PRAGMA function __DEV_BCDCnt_GetValue_OnStack begin
__DEV_BCDCnt_GetValue_OnStack:	CALL			__DEV_BCDCnt_GetValue
																CALL			__push_arg03
																RETURN
;PRAGMA function end
;
