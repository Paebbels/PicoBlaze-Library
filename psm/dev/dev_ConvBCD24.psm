; EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t -*-
; vim: tabstop=2:shiftwidth=2:noexpandtab
; kate: tab-width 2; replace-tabs off; indent-width 2;
; 
; ==============================================================================
; Authors:					Patrick Lehmann
;
; Assembler-Code:		BCD Converter functions for 24 bit
; 
; Description:
; ------------------------------------
;	public functions:
;		__DEV_ConvBCD24_
;		__ISR_ConvBCD24
;   
;	private functions:
;   
; License:
; ==============================================================================
; Copyright 2012-2015 Patrick Lehmann - Dresden, Germany
; 
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
;		http://www.apache.org/licenses/LICENSE-2.0
; 
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ==============================================================================
;
; Constants
; ===============================================
CONSTANT CONVBCD24_STATUS_SIGN,						10		;
CONSTANT CONVBCD24_STATUS_DONE,						80		;
;
; Co-Processor macros
; ===============================================
;PRAGMA function __DEV_ConvBCD24_Wait begin
;;		Requires:
;;			
;;		Returns:
;;			
__DEV_ConvBCD24_Wait:					INPUT		REG_TMP_0,		IPORT_CONVBCD24_STATUS	; Read computation status
															TEST		REG_TMP_0,		CONVBCD24_STATUS_DONE
															RETURN	C
															JUMP 		__DEV_ConvBCD24_Wait
;PRAGMA function end
;
;PRAGMA function __DEV_ConvBCD24_Begin begin
;;		Requires:
;;			Arg0 : Input value(7:0)
;;			Arg1 : Input value(15:8)
;;			Arg2 : Input value(23:16)
;;		Returns:
;;			
__DEV_ConvBCD24_Begin:				OUTPUT	REG_ARG_0,		OPORT_CONVBCD24_OPERANDA0			;	Write arg0 to Reg A0
															OUTPUT	REG_ARG_1,		OPORT_CONVBCD24_OPERANDA1			;	Write arg1 to Reg A1
															OUTPUT	REG_ARG_2,		OPORT_CONVBCD24_OPERANDA2			;	Write arg2 to Reg A2
															RETURN
;PRAGMA function end
;
;PRAGMA function __DEV_ConvBCD24_End begin
;;		Requires:
;;			
;;		Returns: Compact BCD
;;			Arg0 : digit(1:0)
;;			Arg1 : digit(3:2)
;;			Arg2 : digit(5:4)
;;			Arg3 : digit(6)
;;		
__DEV_ConvBCD24_End:					INPUT		REG_ARG_0,		IPORT_CONVBCD24_RESULT0			;	Write Reg R0 to arg0
															INPUT		REG_ARG_1,		IPORT_CONVBCD24_RESULT1			;	Write Reg R1 to arg1
															INPUT		REG_ARG_2,		IPORT_CONVBCD24_RESULT2			;	Write Reg R2 to arg2
															INPUT		REG_ARG_3,		IPORT_CONVBCD24_STATUS			;	Write Reg R3 to arg3
															AND 		REG_ARG_3, 		0f
															RETURN
;PRAGMA function end
;
;
; Interrupt Handler
; ===============================================
;PRAGMA function __ISR_ConvBCD24 begin
__ISR_ConvBCD24:							JUMP __ISR_Error

;PRAGMA function end
