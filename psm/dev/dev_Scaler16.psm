; EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t -*-
; vim: tabstop=2:shiftwidth=2:noexpandtab
; kate: tab-width 2; replace-tabs off; indent-width 2;
; 
; ==============================================================================
; Assembler-Code:		Scaler functions for 16 bit
; 
; Authors:					Patrick Lehmann
;
; Description:
; ------------------------------------
;	public functions:
;		__CP_Scaler16_Wait
;		__CP_Scaler16_Begin
;		__CP_Scaler16_End
;		__ISR_Scaler16
;   
;	private functions:
;   
; License:
; ==============================================================================
; Copyright 2012-2015 Patrick Lehmann - Dresden, Germany
; 
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
;		http://www.apache.org/licenses/LICENSE-2.0
; 
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ==============================================================================
;
; Constants
; ===============================================
CONSTANT SCALER16_STATUS_DONE,						01		;
;
; Co-Processor macros
; ===============================================
;PRAGMA function _dev_scaler16_wait begin
;;		Requires:
;;			
;;		Returns:
;;			
__DEV_Scaler16_Wait:					INPUT		REG_TMP_0,		IPORT_SCALER16_REG_STATUS	; Read computation status
															TEST		REG_TMP_0,		SCALER16_STATUS_DONE
															RETURN	NZ
															JUMP 		__DEV_Scaler16_Wait
;PRAGMA function end
;
;PRAGMA function _cp_scaler16_begin begin
;;		Requires:
;;			Arg0 : Input value(7:0)
;;			Arg1 : Input value(15:8)
;;			Arg2 : Mult(7:0)
;;			Arg3 : Div(7:0)
;;		Returns:
;;			
__CP_Scaler16_Begin:					OUTPUT	REG_ARG_0,		OPORT_SCALER16_REG_A0			;	Write arg0 to Reg A0
															OUTPUT	REG_ARG_1,		OPORT_SCALER16_REG_A1			;	Write arg1 to Reg A1
															OUTPUT	REG_ARG_2,		OPORT_SCALER16_REG_MULT		;	Write arg5 to Reg MULT
															OUTPUT	REG_ARG_3,		OPORT_SCALER16_REG_DIV		;	Write arg6 to Reg DIV; start calculation
															RETURN
;PRAGMA function end
;
;PRAGMA function _cp_scaler16_end begin
;;		Requires:
;;			
;;		Returns:
;;			Arg0 : Scaled value(7:0)
;;			Arg1 : Scaled value(15:8)
;;		
__CP_Scaler16_End:						INPUT		REG_ARG_0,		IPORT_SCALER16_REG_R0			;	Write Reg R0 to arg0
															INPUT		REG_ARG_1,		IPORT_SCALER16_REG_R1			;	Write Reg R1 to arg1
															RETURN
;PRAGMA function end
;
;
; Interrupt Handler
; ===============================================
;PRAGMA function _ISR_Scaler16 begin
__ISR_Scaler16:			JUMP __ISR_Error

;PRAGMA function end
